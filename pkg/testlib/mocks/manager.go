// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	contract "jsonstore/pkg/contract"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *Manager) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *Manager) Get(_a0 string) (*contract.GetConfigResponse, error) {
	ret := _m.Called(_a0)

	var r0 *contract.GetConfigResponse
	if rf, ok := ret.Get(0).(func(string) *contract.GetConfigResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contract.GetConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Manager) GetAll() ([]contract.GetConfigResponse, error) {
	ret := _m.Called()

	var r0 []contract.GetConfigResponse
	if rf, ok := ret.Get(0).(func() []contract.GetConfigResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contract.GetConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *Manager) Search(_a0 string, _a1 string) ([]contract.GetConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []contract.GetConfigResponse
	if rf, ok := ret.Get(0).(func(string, string) []contract.GetConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contract.GetConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *Manager) Upsert(_a0 contract.UpsertConfigRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(contract.UpsertConfigRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
